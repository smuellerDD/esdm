From 23b30f24e9a9f4f7957fac2274ea511167ab7917 Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Fri, 9 Jun 2023 22:15:30 +0200
Subject: [PATCH 2/3] ESDM: interrupt entropy source hooks

The interrupt entropy source requires a hook into the
add_interrupt_randomness function. To allow the entropy source
to be compiled as a kernel module, a small framework is added which
allows registering the callback function of the entropy source
implementation. If no such implementation is registered, the hook is a
noop.

Note, the kernel module should wait until registering its callback until
the kernel random.c has been fully seeded as registering the ESDM
callback means that random.c is deprived of one of its main entropy
sources. Further, ESDM should inject fresh entropy into random.c once in
a while.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/random.c    | 14 ++++++++++---
 drivers/misc/Makefile    |  1 +
 drivers/misc/esdm_irq.c  | 43 ++++++++++++++++++++++++++++++++++++++++
 include/linux/esdm_irq.h | 20 +++++++++++++++++++
 4 files changed, 75 insertions(+), 3 deletions(-)
 create mode 100644 drivers/misc/esdm_irq.c
 create mode 100644 include/linux/esdm_irq.h

diff --git a/drivers/char/random.c b/drivers/char/random.c
index 253f2ddb8913..e62f3d80e7ac 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -54,6 +54,7 @@
 #include <linux/suspend.h>
 #include <linux/siphash.h>
 #include <linux/sched/isolation.h>
+#include <linux/esdm_irq.h>
 #include <crypto/chacha.h>
 #include <crypto/blake2s.h>
 #include <asm/archrandom.h>
@@ -1088,11 +1089,18 @@ static void mix_interrupt_randomness(struct timer_list *work)
 void add_interrupt_randomness(int irq)
 {
 	enum { MIX_INFLIGHT = 1U << 31 };
-	unsigned long entropy = random_get_entropy();
-	struct fast_pool *fast_pool = this_cpu_ptr(&irq_randomness);
-	struct pt_regs *regs = get_irq_regs();
+	unsigned long entropy;
+	struct fast_pool *fast_pool;
+	struct pt_regs *regs;
 	unsigned int new_count;
 
+	if (add_esdm_interrupt_randomness(irq))
+		return;
+
+	entropy = random_get_entropy();
+	fast_pool = this_cpu_ptr(&irq_randomness);
+	regs = get_irq_regs();
+
 	fast_mix(fast_pool->pool, entropy,
 		 (regs ? instruction_pointer(regs) : _RET_IP_) ^ swab(irq));
 	new_count = ++fast_pool->count;
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 7272f3c80719..c258f8dc1ff5 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -4,6 +4,7 @@
 #
 
 obj-y				+= esdm_sched.o
+obj-y				+= esdm_irq.o
 
 obj-$(CONFIG_IBM_ASM)		+= ibmasm/
 obj-$(CONFIG_IBMVMC)		+= ibmvmc.o
diff --git a/drivers/misc/esdm_irq.c b/drivers/misc/esdm_irq.c
new file mode 100644
index 000000000000..ef007d6187a9
--- /dev/null
+++ b/drivers/misc/esdm_irq.c
@@ -0,0 +1,43 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2024, Stephan Mueller <smueller@chronox.de>
+ *
+ * ESDM entropy source user space interface.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/esdm_irq.h>
+#include <linux/module.h>
+
+static esdm_irq_randomness_t esdm_irq_randomness_func = NULL;
+
+int add_esdm_interrupt_randomness(int irq)
+{
+	if (!esdm_irq_randomness_func)
+		return 0;
+
+	esdm_irq_randomness_func(irq);
+	return 1;
+}
+
+int esdm_irq_register(esdm_irq_randomness_t func)
+{
+	if (!func)
+		return -EINVAL;
+
+	if (cmpxchg(&esdm_irq_randomness_func, NULL, func) != NULL)
+		return -EAGAIN;
+	return 0;
+}
+EXPORT_SYMBOL(esdm_irq_register);
+
+void esdm_irq_unregister(esdm_irq_randomness_t func)
+{
+	if (!func)
+		return;
+
+	if (cmpxchg(&esdm_irq_randomness_func, func, NULL) != func)
+		pr_warn("Cannot unregister ESDM irquler callback\n");
+}
+EXPORT_SYMBOL(esdm_irq_unregister);
diff --git a/include/linux/esdm_irq.h b/include/linux/esdm_irq.h
new file mode 100644
index 000000000000..172f4572eb45
--- /dev/null
+++ b/include/linux/esdm_irq.h
@@ -0,0 +1,20 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2024, Stephan Mueller <smueller@chronox.de>
+ */
+
+#ifndef _ESDM_IRQ_H
+#define _ESDM_IRQ_H
+
+#include <linux/irq.h>
+
+typedef void (*esdm_irq_randomness_t)(int irq);
+
+/* Callback for irquler */
+extern int add_esdm_interrupt_randomness(int irq);
+
+/* Register and unregister handler functions */
+int esdm_irq_register(esdm_irq_randomness_t func);
+void esdm_irq_unregister(esdm_irq_randomness_t func);
+
+#endif /* _ESDM_IRQ_H */
-- 
2.39.2

